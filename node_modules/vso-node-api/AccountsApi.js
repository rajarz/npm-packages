"use strict";
/*
 * ---------------------------------------------------------
 * Copyright(C) Microsoft Corporation. All rights reserved.
 * ---------------------------------------------------------
 *
 * ---------------------------------------------------------
 * Generated file, DO NOT EDIT
 * ---------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const basem = require("./ClientApiBases");
const AccountsInterfaces = require("./interfaces/AccountsInterfaces");
class AccountsApi extends basem.ClientApiBase {
    constructor(baseUrl, handlers, options) {
        super(baseUrl, handlers, 'node-Accounts-api', options);
    }
    /**
     * @param {AccountsInterfaces.AccountCreateInfoInternal} info
     * @param {boolean} usePrecreated
     */
    createAccount(info, usePrecreated) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                let queryValues = {
                    usePrecreated: usePrecreated,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("4.1-preview.1", "Account", "229a6a53-b428-4ffb-a835-e8f36b5b4b1e", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.create(url, info, options);
                    let ret = this.formatResponse(res.result, AccountsInterfaces.TypeInfo.Account, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * @param {string} accountId
     */
    getAccount(accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    accountId: accountId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("4.1-preview.1", "Account", "229a6a53-b428-4ffb-a835-e8f36b5b4b1e", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, AccountsInterfaces.TypeInfo.Account, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * Get a list of accounts for a specific owner or a specific member.
     *
     * @param {string} ownerId - ID for the owner of the accounts.
     * @param {string} memberId - ID for a member of the accounts.
     * @param {string} properties
     */
    getAccounts(ownerId, memberId, properties) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                let queryValues = {
                    ownerId: ownerId,
                    memberId: memberId,
                    properties: properties,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("4.1-preview.1", "Account", "229a6a53-b428-4ffb-a835-e8f36b5b4b1e", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, AccountsInterfaces.TypeInfo.Account, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     */
    getAccountSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("4.1-preview.1", "Account", "4e012dd4-f8e1-485d-9bb3-c50d83c5b71b", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, null, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
}
exports.AccountsApi = AccountsApi;
