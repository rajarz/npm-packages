import basem = require('./ClientApiBases');
import VsoBaseInterfaces = require('./interfaces/common/VsoBaseInterfaces');
import AccountsInterfaces = require("./interfaces/AccountsInterfaces");
export interface IAccountsApi extends basem.ClientApiBase {
    createAccount(info: AccountsInterfaces.AccountCreateInfoInternal, usePrecreated?: boolean): Promise<AccountsInterfaces.Account>;
    getAccount(accountId: string): Promise<AccountsInterfaces.Account>;
    getAccounts(ownerId?: string, memberId?: string, properties?: string): Promise<AccountsInterfaces.Account[]>;
    getAccountSettings(): Promise<{
        [key: string]: string;
    }>;
}
export declare class AccountsApi extends basem.ClientApiBase implements IAccountsApi {
    constructor(baseUrl: string, handlers: VsoBaseInterfaces.IRequestHandler[], options?: VsoBaseInterfaces.IRequestOptions);
    /**
     * @param {AccountsInterfaces.AccountCreateInfoInternal} info
     * @param {boolean} usePrecreated
     */
    createAccount(info: AccountsInterfaces.AccountCreateInfoInternal, usePrecreated?: boolean): Promise<AccountsInterfaces.Account>;
    /**
     * @param {string} accountId
     */
    getAccount(accountId: string): Promise<AccountsInterfaces.Account>;
    /**
     * Get a list of accounts for a specific owner or a specific member.
     *
     * @param {string} ownerId - ID for the owner of the accounts.
     * @param {string} memberId - ID for a member of the accounts.
     * @param {string} properties
     */
    getAccounts(ownerId?: string, memberId?: string, properties?: string): Promise<AccountsInterfaces.Account[]>;
    /**
     */
    getAccountSettings(): Promise<{
        [key: string]: string;
    }>;
}
